matrix = [
  ("r19c", {"arm": ["16", "17", "18", "19",      "21", "22", "23", "24",       "26", "27", "28",], "arm64": ["28",], "x86_64": ["28",], }),
  ("r18b", {"arm": ["16",                        "21",             "24",                   "28",],                                      }),
  ("r17c", {"arm": ["16",                        "21",             "24",                   "28",],                                      }),
  ("r16b", {"arm": ["16",                        "21",             "24",                        ],                                      }),
  ("r15c", {"arm": ["16",                        "21",             "24",                        ],                                      }),
  ("r14b", {"arm": ["16",                                                                       ],                                      }),
  ("r13b", {"arm": ["16",                        "21",                                          ],                                      }),
  ("r12b", {"arm": ["16",                                                                       ],                                      }),
]

import sys
from enum import Enum, auto

class Kind(Enum):
  SHELL = auto()
  TRAVIS = auto()
  MARKDOWN = auto()

files = {
  Kind.SHELL: 'shell_matrix.sh',
  Kind.TRAVIS: '.travis.yml',
  Kind.MARKDOWN: 'README.md',
}

def get_comment(kind, *args, **kw):
  kind = Kind(kind)
  sep = kw['sep'] if 'sep' in kw else ' '
  if kind == Kind.SHELL or kind == Kind.TRAVIS:
    comment_format = '# {}'
  elif kind == Kind.MARKDOWN:
    comment_format = '<!-- {} -->'
  else:
    raise NotImplementedError
  return comment_format.format(sep.join(args))

def comment(file, kind, *args, **kw):
  print(get_comment(kind, *args, **kw), file=file, **kw)

def read_file(kind):
  begin = get_comment(kind, 'BEGIN MATRIX') + '\n'
  end = get_comment(kind, 'END MATRIX') + '\n'
  mode = 0
  before = []
  after = []
  with open(files[kind]) as file:
    for line in file:
      if mode == 0:
        before.append(line)
        if line == begin:
          mode = 1
      elif mode == 1:
        if line == end:
          after.append(line)
          mode = 2
      else:
        after.append(line)
  return (before, after)

case_templates = {
  Kind.SHELL: '''echo {rev}-{arch}-{api}
ndk={rev} arch={arch} api={api} bash single_round.sh &> {name}.log || (echo FAIL; bash rm_toolchain.sh; exit 0)''',
  Kind.TRAVIS: '''    - name: "{name}"
      env:
        - arch={arch}
        - ndk={rev}
        - api={api}''',
}

for kind in Kind:
  before, after = read_file(kind)
  filename = files[kind]
  with open(filename, 'w') as file:
    for line in before:
      print(line, end='', file=file)
    comment(file, kind, 'This part is generated by matrix.py')
    if kind in (Kind.SHELL, Kind.TRAVIS):
      case_template = case_templates[kind]
      for rev, abis in matrix:
        comment(file, kind, rev, '========================================')
        if kind == Kind.SHELL:
          print('ndk={} bash get_ndk.sh'.format(rev), file=file)
        for arch, apis in abis.items():
          for api in apis:
            name = '{}-{}-{}'.format(rev, arch, api)
            print(case_template.format(name=name, arch=arch, rev=rev, api=api), file=file)
        if kind == Kind.SHELL:
          print('ndk={} bash rm_ndk.sh'.format(rev), file=file)
    elif kind == Kind.MARKDOWN:
      all_apis = set()
      for rev, abis in matrix:
        for arch, apis in abis.items():
          all_apis |= set(apis)
      all_apis = list(all_apis)
      all_apis.sort(key=lambda i: int(i))
      print('| NDK ', end='', file=file)
      next_line = ['| ']
      for api in all_apis:
        print('|', '{:3}'.format(api), end=' ', file=file)
        next_line.append(' | ')
      print('|', file=file)
      next_line.append(' |')
      print('---'.join(next_line), file=file)

      for rev, abis in matrix:
        print('|', rev, end=' ', file=file)
        for api in all_apis:
          found_archs = []
          for arch, apis in abis.items():
            if api in apis:
              found_archs.append(arch)
          print('|', ', '.join(found_archs) if found_archs else '-', end= ' ', file=file)
        print('|', file=file)
    else:
      raise NotImplementedError
    for line in after:
      print(line, end='', file=file)
